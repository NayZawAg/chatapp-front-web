
<div id="main"> 
  <%= render 'group_show/groupmsglists' %>
  <div class = "textboxbg">
    <div class="textboxeditor">

      <div id="toolbar">
        <button class="ql-bold disable"></button>
        <button class="ql-italic disable"></button>
        <button class="ql-strike disable"></button>
        <button class="ql-link disable"></button>
        <button class="ql-list" value="ordered"></button>
        <button class="ql-list" value="bullet"></button>
        <button class="ql-blockquote"></button>
        <button id="code-block" class="btn-icon"><i class="fas fa-code"></i></button>
        <button id="highlight-text" class="btn-icon disable"><i class="fas fa-laptop-code"></i></button>
      </div>

      <div id="link-dialog" style="display: none;">
        <h3 id= "link-title">Add your link</h3>
        <input type="text" id="link-name" placeholder="Enter link name">
        <input type="text" id="link-url" placeholder="Enter URL">
        <button id="link-cancel">Cancel</button>
        <button id="link-save">Yes</button>
      </div>

      <% if @m_channelsids.include?session[:s_channel_id].to_i%>
        <%= form_for(:session, url: groupmsg_path) do |f| %>
          <div class="col-md-11">
            <div id="editor" class="form-control" data-autocomplete-source="<%= @m_channel_users.map { |t| { label: '@' + t['name'] } }.to_json %>"></div>
            <%= f.hidden_field :message, id: 'quill-content' %>
          </div>
          <div class="col-md-1 mt-10">
            <%= f.submit "Send", class: "btn btn-primary sendbtn"%>
          </div>
          <%= f.hidden_field :memtion_name, class: 'memtion_name' %>
        <% end %>
      <% else %>
        <div style="padding-bottom: 20px" >
          <%= link_to "Join into channel", channeluserjoin_path(userid: session[:user_id]), class: 'btn btn-primary'%>
        </div>
      <% end %>

      <div class="col-md-11">
        <span><i class="fas fa-plus"></i></span>
        <button class="glyphicon glyphicon-font icon togglebtn" id="toggle-toolbar"></button>
      </div>

    </div>
  </div>

<div>
  <%= render 'leftpanel/leftpanel' %>
</div>


<script>

  // highlight
  var Inline = Quill.import('blots/inline');

  class HighlightBlot extends Inline {
    static create(value) {
      let node = super.create();
      node.setAttribute('class', 'highlight');
      return node;
    }

    static formats(node) {
      return node.getAttribute('class');
    }
  }

  HighlightBlot.blotName = 'highlight';
  HighlightBlot.tagName = 'span';
  Quill.register(HighlightBlot);

//code block
  var Block = Quill.import('blots/inline');
  class CodeBlot extends Block {
    static create(value) {
      let node = super.create();
      node.setAttribute('class', 'codeblock');
      return node;
    }

    static formats(node) {
      return node.getAttribute('class');
    }
  }

  CodeBlot.blotName = 'codeblock';
  CodeBlot.tagName = 'span';
  Quill.register(CodeBlot);

  //call quill
  document.addEventListener("DOMContentLoaded", function() {
    const toolbarOptions = [
                            [{ 'header': [1, 2, 3, 4, 5, 6, false] }],
                            ['bold', 'italic', 'strike'],
                            ['link'],
                            [{ 'list': 'ordered'}, { 'list': 'bullet' }],
                            ['blockquote', 'code-block'],
                          ];
  
    const quill = new Quill('#editor', {
      modules: {
        toolbar: {
          container: '#toolbar',
          handlers: {
            link: function() {
              const range = this.quill.getSelection();
              if (range) {
                showLinkDialog(range);
              }
            }
          }
        }
      },
      placeholder: 'Type your message here ...',
      theme: 'snow'
    });

    // highlight start
    var isHighlighting = false;

    function updateButtonText() {
       
      if(isHighlighting){
        document.querySelector('#highlight-text').classList.add('active');
      } else {
        document.querySelector('#highlight-text').classList.remove('active');
      }
    }

    function toggleHighlight() {
      var format = quill.getFormat();
      if (format.highlight) {
          quill.format('highlight', false);
          isHighlighting = false;
      } else {
          quill.format('highlight', true);
          isHighlighting = true;
      }
      updateButtonText();
      quill.focus();
    }


    quill.on('text-change', function() {
      var format = quill.getFormat();
        isHighlighting = !!format.highlight;
        updateButtonText();
    });


    document.querySelector('#highlight-text').addEventListener('click', function() {     
        if(!isCodeblocking) {
          toggleHighlight();
        } else {
          quill.focus();
        }
        var htmlContent = quill.root.innerHTML;
        document.querySelector('#quill-content').value = htmlContent;
    });

    updateButtonText();
    //highlight end 

    // codeblock start 
    var isCodeblocking = false;

    function updateCodeBtn() {
      
      if(isCodeblocking){
        document.querySelector('#code-block').classList.add('active');
        var btns = document.querySelectorAll(".disable");
        btns.forEach(btn => btn.disabled = true);
      } else {
        document.querySelector('#code-block').classList.remove('active');
        var btns = document.querySelectorAll(".disable");
        btns.forEach(btn => btn.disabled = false);
      }
    }

    function toggleCodeblock() {
      var format = quill.getFormat();
      if (format.codeblock) {
        quill.format('codeblock', false);
        isCodeblocking = false;
      } else {
        quill.format('codeblock', true);
        isCodeblocking = true;
      }
      updateCodeBtn();
      quill.focus();
    }


    quill.on('text-change', function() {
      var format = quill.getFormat();
        isCodeblocking = !!format.codeblock;
        updateCodeBtn();
        // checkHighlightStatus();
    });


    document.querySelector('#code-block').addEventListener('click', function() {
      if(!isHighlighting) {
        toggleCodeblock();
      } else {
        quill.focus();
      }
      var htmlContent = quill.root.innerHTML;
      document.querySelector('#quill-content').value = htmlContent;
    });

    updateCodeBtn();
    // codeblock end    

    // codeblock and highlight btn status 
    quill.container.firstChild.addEventListener('keydown', function(event) {
      if (event.key === 'Enter') {
        isCodeblocking = false;
        updateCodeBtn();
        isHighlighting = false;
        updateButtonText();
      }
    });

    // for link dialog 
    var range = quill.getSelection();
      quill.on('selection-change', function(range, oldRange, source) {
        if (range && range.length > 0) {
          var selectedText = quill.getText(range.index, range.length);

          if(selectedText){
            $('#toolbar').removeClass("hidden");
          }

          $('#link-name').val(selectedText);
          console.log(selectedText)

        } 
      });

    function showLinkDialog(range) {
      document.getElementById('link-dialog').style.display = 'block';
      document.getElementById('link-name').focus();
      document.getElementById('link-save').onclick = function() {
        const linkText = document.getElementById('link-name').value;
        const linkUrl = document.getElementById('link-url').value;
        if (linkText && linkUrl) {
          quill.insertText(range.index, linkText,'link',linkUrl);
          if (range.length > 0) {
            quill.deleteText(range.index + linkText.length, range.length);
          }
          quill.setSelection(range.index + linkText.length, 0);
          hideLinkDialog();
        }

      };

      document.getElementById('link-cancel').onclick = function() {
        hideLinkDialog();
      };
    }

    function hideLinkDialog() {
      document.getElementById('link-dialog').style.display = 'none';
      document.getElementById('link-name').value = '';
      document.getElementById('link-url').value = '';
    }

    // Prevent Quill from losing focus when clicking inside the dialog
    document.getElementById('link-dialog').addEventListener('mousedown', function(event) {
      event.stopPropagation();
    });

    // for toggle toolbar 
    const toolbar = quill.getModule('toolbar');
    const toolbarui = document.getElementById('toolbar');
    const toggleButton = document.getElementById('toggle-toolbar');

    toggleButton.addEventListener('click', function() {
      toolbarui.classList.toggle('hidden');
    });

    var form = document.querySelector('form');
    form.onsubmit = function() {
      var htmlContent = quill.getSemanticHTML();
      document.querySelector('#quill-content').value = htmlContent;
    }


    // for mention select 
    $( "#editor" ).autocomplete({
        source: $('#editor').data('autocomplete-source'),
        position: {
          my: "left bottom",
          at: "left top",
      },
      select: function(event, ui) {
        event.preventDefault();
        var range = quill.getSelection();

        range.value = ui.item.value
        $('.memtion_name').val(range.value)
        
        // Check the text before the cursor
        var textBefore = quill.getText(range.index - 1, 1);
        if (textBefore === '@') {
          // Delete the @ before inserting the new text
          quill.deleteText(range.index - 1, 1);
          range.index -= 1;
        }

        quill.insertText(range.index, ui.item.label, "user");
        quill.setSelection(range.index + ui.item.label.length);
        
      }
    });

    $('#stop').click(function() {
      clearInterval(yourInterval);
    });

    //validate btn
    var sendbtn = document.querySelector(".sendbtn");
    sendbtn.disabled = true;
    quill.on('text-change', function(delta, oldDelta, source) {
      const editorContent = quill.getText().trim();
      if (editorContent.length > 0) {
        sendbtn.disabled = false;
      } else {
        sendbtn.disabled = true;
      }
    });

  });

</script>

